{
    "collab_server" : "",
    "contents" : "################################################\n#      Introducción a la Ciencia de Datos      #\n#               REGRESIÓN k-NN                 #\n#                                              #\n# (C) Cristian González Guerrero               #\n################################################\n\n# Build the workspace\nsource(\"../regression/build-workspace.R\")\n\nabalone = abalone[abalone$Height<0.3,]\n\n# Get simple knn models\nsimple.knn.fit = list()\nfor (i in 1:(length(abalone)-1)) {\n  simple.knn.fit[[i]] = kknn(abalone$Rings~abalone[,i], abalone, abalone)\n  names(simple.knn.fit)[i] = names(abalone)[i]\n}\n\n\n## Scatterplots\nmyData1 = melt.data.frame(\n  abalone,\n  id.vars=c(\"Sex\", \"Rings\")\n)\n\nmyData2 = data.frame()\nfor (variable in names(simple.knn.fit)[2:8]) {\n  Prediction = simple.knn.fit[[variable]]$fitted.values\n  myData2 = rbind(myData2, data.frame(Prediction))\n}\n\nmyData = cbind(myData1, myData2)\n\nData = \"Original data\"\nb = \"Prediction\"\ncolorPalette <- c(\"#000000\", \"#56B4E9\")\n\nggplot(myData) + \n  geom_point(aes(x = value, y = Rings, color = Data), alpha = 0.03) + \n  geom_point(aes(x = value, y = Prediction, color = b), alpha = 0.03) + \n  facet_wrap( ~ variable, ncol = 2, scales = \"free\") + \n  xlab(\"\") +\n  scale_colour_manual(values=colorPalette) +\n  guides(colour = guide_legend(override.aes = list(alpha = 1)))\n\n## MSE\nMSE = matrix(nrow = 8, ncol = 2)\ncolnames(MSE) = c(\"train\", \"test\")\nrownames(MSE) = names(abalone)[1:8]\nfor (tt in colnames(MSE)) {\n  for (i in rownames(MSE)) {\n    MSE[i, tt] = mean(sapply(\n      1:5, \n      run_knn_fold, \n      model = Rings~eval(parse(text = i)), \n      tt = tt,\n      k = 7   # Modify k\n    ))\n  }\n}\n\n## Comparative k\nk = 1:20\nMSE.Shell_weight = data.frame(k)\nfor (tt in c(\"train\", \"test\")) {\n  for (i in k) {\n    MSE.Shell_weight[i,tt] = mean(sapply(\n      1:5, \n      run_knn_fold, \n      model = Rings~Shell_weight, \n      tt = tt,\n      k = i\n    ))\n  }\n}\n\nData = \"test\"\nb = \"train\"\nggplot(MSE.Shell_weight) + \n  geom_point(aes(x = k, y = test,  color = Data)) + \n  geom_line (aes(x = k, y = test,  color = Data)) +\n  geom_point(aes(x = k, y = train, color = b)) + \n  geom_line (aes(x = k, y = train, color = b)) + \n  ylab(\"MSE\") + \n  scale_colour_manual(values=colorPalette)\n  \n\n\n# Non-linearities\nabalone = add.non.linearities(abalone)\nabalone.tra = lapply(abalone.tra, add.non.linearities)\nabalone.tst = lapply(abalone.tst, add.non.linearities)\n\nMSE = matrix(nrow = ncol(abalone), ncol = 2)\ncolnames(MSE) = c(\"train\", \"test\")\nrownames(MSE) = names(abalone)\nfor (tt in colnames(MSE)) {\n  for (i in rownames(MSE)) {\n    MSE[i, tt] = mean(sapply(\n      1:5, \n      run_knn_fold, \n      model = Rings~eval(parse(text = i)), \n      tt = tt,\n      k = 7   # Modify k\n    ))\n  }\n}\n\n\n# Multiple variables\nabalone = abalone[,1:9]\nabalone.tra = lapply(abalone.tra, function(df){return(df[,1:9])})\nabalone.tst = lapply(abalone.tst, function(df){return(df[,1:9])})\nMSE.record = data.frame()\n\nknn.MSE.data.frame = function(model = Rigns~., k = 1:20, i = 1:5, tt = c(\"train\", \"test\")) {\n  MSE = data.frame(k)\n  tt_ = tt\n  i_  = i\n  for (tt in tt_) {\n    for (i in k) {\n      MSE[i, tt] = mean(sapply(\n        i_, \n        run_knn_fold, \n        model = model, \n        tt = tt,\n        k = i   # Modify k\n      ))\n    }\n  }\n  MSE$model = as.character(myModel)[3]\n  \n  return(MSE)\n}\n\nplot.MSE.data.frame = function(MSE) {\n  myData = melt.data.frame(\n    MSE,\n    id.vars = c(\"k\", \"model\"),\n    variable_name = \"Data\"\n  )\n  \n  ggplot(myData, aes(x = k, y = value, color = Data)) + \n    geom_point() + geom_line () + ylab(\"MSE\")\n}\n\n\nmyModel = Rings~.\n\nMSE = knn.MSE.data.frame(myModel)\nMSE.record = rbind(MSE.record, MSE)\nplot.MSE.data.frame(MSE)\n\n\n## No interactions\nmyModel = Rings ~ \n  Diameter + \n  Height + \n  Whole_weight + \n  Shucked_weight + \n  Viscera_weight + \n  Shell_weight\n\nMSE = knn.MSE.data.frame(myModel)\nMSE.record = rbind(MSE.record, MSE)\nplot.MSE.data.frame(MSE)\n\n\n## Non-linearities\nabalone = add.non.linearities(abalone)\nabalone.tra = lapply(abalone.tra, add.non.linearities)\nabalone.tst = lapply(abalone.tst, add.non.linearities)\n\nmyModel = Rings ~\n  Length + \n  Height + \n  Whole_weight.log + \n  Shucked_weight.log + \n  Viscera_weight.log + \n  Shell_weight.3\n\nMSE = knn.MSE.data.frame(myModel)\nMSE.record = rbind(MSE.record, MSE)\nplot.MSE.data.frame(MSE)\n\n\n## Non-linearities (poly)\nmyModel = Rings ~\n  poly(Length, 2) + \n  poly(Height, 2) + \n  poly(Whole_weight, 2) + \n  poly(Shucked_weight, 2) + \n  poly(Viscera_weight, 2) + \n  poly(Shell_weight, 2)\n\nMSE = knn.MSE.data.frame(myModel)\nMSE.record = rbind(MSE.record, MSE)\nplot.MSE.data.frame(MSE)\n\n#--\nmyModel = Rings ~\n  poly(Length, 3) + \n  poly(Height, 3) + \n  poly(Whole_weight, 3) + \n  poly(Shucked_weight, 3) + \n  poly(Viscera_weight, 3) + \n  poly(Shell_weight, 3)\n\nMSE = knn.MSE.data.frame(myModel)\nMSE.record = rbind(MSE.record, MSE)\nplot.MSE.data.frame(MSE)\n\n\n## Interactions\nmyModel = Rings ~\n  Length + \n  Height + \n  Whole_weight.log * \n  Shucked_weight.log * \n  Viscera_weight * \n  Shell_weight.3\n\nMSE = knn.MSE.data.frame(myModel)\nMSE.record = rbind(MSE.record, MSE)\nplot.MSE.data.frame(MSE)\n\n## Compare k\nmyData = subset(MSE.record, select = -train)\nmyData = myData[myData$k>2,]\nmyData = melt.data.frame(\n  myData,\n  id.vars = c(\"k\", \"model\"),\n  variable_name = \"Data\"\n)\nmyData$Data = paste(myData$Data, \" in \", myData$model)\n\nggplot(myData, aes(x = k, y = value, color = Data)) + \n  geom_point() + geom_line () + ylab(\"MSE\") + theme(legend.position = \"bottom\", legend.direction = \"vertical\")\n\n",
    "created" : 1502723877521.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "844307010",
    "id" : "7286165E",
    "lastKnownWriteTime" : 1502885667,
    "last_content_update" : 1502885667664,
    "path" : "/home/cristian10/workspace/master/icd/final/src/regression/knn-regression.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}