242/255
205/255
"hello"
c(3, 106,7)/255
c(76,136,107)/255
?load
?data
data()
load('datasets/abalone/abalone.dat')
load?
;
?load
abalone <- read.csv("/home/cristian10/workspace/master/icd/final/src/analysis/datasets/abalone/abalone.dat", sep="")
View(abalone)
abalone <- read.csv("datasets/abalone/abalone.dat", sep=",")
abalone <- read.csv("datasets/abalone/abalone.dat")
abalone <- read.csv2("/home/cristian10/workspace/master/icd/final/src/analysis/datasets/abalone/abalone.dat", sep="")
View(abalone)
tae <- read.delim("/home/cristian10/workspace/master/icd/final/src/analysis/datasets/tae/tae.dat", comment.char="@")
View(tae)
tae <- read.delim("datasets/tae/tae.dat", comment.char="@", sep = ",")
data()
View(iris)
save(iris)
save(file = "iris.dat", iris)
tae <- read.csv("datasets/tae/tae.dat", comment.char="@")
View(tae)
View(tae)
View(tae)
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("utils")
tae <- read.csv("datasets/tae/tae.dat", comment.char="@")
View(tae)
View(tae)
library("foreign")
# Load the dataset and provide it with a structure
tae = read.csv("datasets/tae/tae.dat", comment.char="@")
tae = read.arff("datasets/tae/tae.dat")
?read.arff
tae = read.arff("datasets/tae/tae.dat")
tae = read.arff('datasets/tae/tae.dat')
read.arff('datasets/tae/tae.dat')
read.arff()
read.arff(file = 'dataset')
read.arff(file = 'dataset/tae/')
read.arff(file = 'dataset/tae/tae.dat')
read.arff(file = 'datasets/tae/tae.dat')
farff
??arff
install.packages("sos")
library("sos", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
farff
library("sos")
findFn("arff")
arff
??arff
detach("package:sos", unload=TRUE)
install.packages("farff")
library("farff")
tae = farff('datasets/tae/tae.dat')
tae = readARFF('datasets/tae/tae.dat')
read.dataset
findFn('read.dataset')
library('sos')
findFn('read.dataset')
install.packages("bnstruct")
install.packages("SDEFSR")
install.packages("RKEEL")
library("SDEFSR")
tae = read.dataset('datasets/tae/tae.dat')
View(tae)
tae = read.csv("datasets/tae/tae.dat", comment.char="@")
View(tae)
View(tae)
class(tae)
names(tae) = c("Native", "Instructor", "Course", "Semester", "Size", "Class")
View(tae)
View(tae)
library("foreign")
class(tae)
size(tae)
??size
nrow(tae)
ncol(tae)
NCOL(tae)
?nrow
dim(tae)
class(tae$Native)
sapply(tae, class)
?sapply
tae$Class = factor(tae$Class)
sapply(tae, class)
library(utils)
library(stats)
library(foreign)
demo(sapply)
Demos(sapply)
Demo(sapply)
vignette()
vignette(sapply)
str(tae)
summary(tae)
tae$Native = factor(tae$Native, levels = c(1,2), labels = c("Native", Non-native))
tae$Native = factor(tae$Native, levels = c(1,2), labels = c("Native", "Non-native"))
summary(tae)
tae$Semester = factor(tae$Semester, levels = c(1,2), labels = c("Summer", "Regular"))
tae$Native = factor(tae$Native, levels = c(1,2), labels = c("English speaker", "non-English speaker"))
tae$Instructor = factor(tae$Instructor)
tae$Course = factor(tae$Course)
tae$Semester = factor(tae$Semester, levels = c(1,2), labels = c("Summer", "Regular"))
tae$Class = factor(tae$Class)
# Get the data type and dimension
class(tae)
dim(tae)
# Get the atomic data types
sapply(tae, class)
# Get summarized information
str(tae)
summary(tae)
tae$Semester
"Semester",
tae$Semester = factor(tae$Semester, levels = c(1,2), labels = c("Summer", "Regular"))
################################################
# Load required libraries
library(utils)
library(stats)
library(foreign)
# Load the dataset and provide it with a
# structure
tae = read.csv(
"datasets/tae/tae.dat",
comment.char="@"
)
names(tae) = c(
"Native",
"Instructor",
"Course",
"Semester",
"Size",
"Class"
)
tae$Native = factor(tae$Native, levels = c(1,2), labels = c("English speaker", "non-English speaker"))
tae$Instructor = factor(tae$Instructor)
tae$Course = factor(tae$Course)
tae$Semester = factor(tae$Semester, levels = c(1,2), labels = c("Summer", "Regular"))
tae$Class = factor(tae$Class)
# Get the data type and dimension
class(tae)
dim(tae)
# Get the atomic data types
sapply(tae, class)
# Get summarized information
str(tae)
summary(tae)
source('/home/cristian10/workspace/master/icd/final/src/analysis/analysis.R', echo=TRUE)
sapply(tae, class)
lapply(tae, class)
str(tae)
?str
?summary
summary(tae)  # Statistical moments
source('/home/cristian10/workspace/master/icd/final/src/analysis/analysis.R', echo=TRUE)
?read.table
# AVALONE
# Load the dataset and provide it with the
# structure from Keel
avalone = read.csv(
"datasets/avalone/avalone.dat",
comment.char="@"
)
# structure from Keel
abalone = read.csv(
"datasets/abalone/abalone.dat",
comment.char="@"
)
names(abalone) = c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole_weight",
"Shucked_weight",
"Viscera_weight",
"Shell_weight",
"Rings"
)
abalone$Sex = factor(
abalone$Sex,
levels = c(1, 2, 3),
labels = c("M", "F", "I")
)
# Get the data type and dimension
class(abalone)
dim(abalone)
# Get summarized information
str(abalone)      # Structure
summary(abalone)  # Statistical momenta
?require
library(ggplot2)
ggplot(abalone, aes(Sex)) + geom_histogram()
ggplot(abalone, aes(Sex)) + geom_histogram(stat = count)
ggplot(abalone, aes(Sex)) + geom_histogram(stat = "count")
ggplot(abalone, aes(Sex)) + geom_histogram(stat = "bin")
ggplot(abalone, aes(x = Sex)) + geom_histogram(stat = "count")
frequency(abalone$Sex)
frequency(abalone$Sex$M)
ggplot(abalone, aes(x = Sex, weights = count)) + geom_histogram()
ggplot(abalone, aes(x = Sex, weights = "count")) + geom_histogram()
ggplot(abalone, aes(x = Sex, weights = "count")) + geom_bar()
ggplot(abalone, aes(x = Sex)) + geom_bar(aes(weights = "count"))
?geom_bar
ggplot(abalone, aes(x = Sex)) + geom_bar(stat = "count")
summary(abalone)  # Statistical momenta
ggplot(abalone, aes(x = Length)) + geom_boxplot()
ggplot(abalone, aes()) + geom_boxplot()
ggplot(abalone) + geom_boxplot()
ggplot(abalone, aes(class, hwy)) + geom_boxplot()
ggplot(abalone, aes(class, abalone)) + geom_boxplot()
ggplot(abalone, aes(class, abalone)) + geom_quantile()
ggplot(abalone, aes(class)) + geom_quantile()
ggplot(abalone, aes(class)) + geom_boxplot()
ggplot(abalone, aes(Length, Diameter)) + geom_boxplot()
ggplot(abalone, aes(Length, Diameter, group)) + geom_boxplot()
ggplot(abalone, aes(x=class, y=length)) + geom_boxplot()
ggplot(abalone, aes(x=class, y=Length)) + geom_boxplot()
ggplot(abalone, aes(x=Length, y=Length)) + geom_boxplot()
ggplot(abalone, aes(x=Length, y=count)) + geom_boxplot()
ggplot(abalone, aes(x=Length, y="count")) + geom_boxplot()
ggplot(abalone, aes(x=Length, y=Length)) + geom_boxplot()
ggplot(abalone, aes(x=Length, y=hbl)) + geom_boxplot()
ggplot(abalone, aes(factor(variable), value)) + geom_boxplot()
data <- data.frame(v1=rnorm(100),v2=rnorm(100),v3=rnorm(100), v4=rnorm(100))
library(reshape)
meltData <- melt(data)
mydata <- data.frame(v1=rnorm(100),v2=rnorm(100),v3=rnorm(100), v4=rnorm(100))
library(reshape)
meltData <- melt(mydata)
data <- data.frame(v1=rnorm(100),v2=rnorm(100),v3=rnorm(100), v4=rnorm(100))
library(reshape)
meltData <- melt(data)
meltData = melt(data)
View(meltData)
View(meltData)
View(data)
View(meltData)
meltData = melt(abalone)
View(abalone)
?melt
meltData = melt.data.frame(data = abalone, id.vars = "")
meltData = melt.data.frame(data = abalone, id.vars = NULL)
meltData = melt.data.frame(data = abalone, id.vars = )
meltData = melt.data.frame(data = abalone[1:8,])
meltData = melt.data.frame(data = abalone[2:9,])
View(meltData)
meltData = melt.data.frame(data = abalone[3:9,])
View(abalone[3:9,])
View(abalone[,2:9])
meltData = melt.data.frame(data = abalone[,2:9])
View(meltData)
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot()
meltData = melt.data.frame(data = abalone[,2:8])
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot()
summary(abalone)  # Statistical momenta
meltData = melt.data.frame(data = abalone[,9])
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot()
meltData = melt.data.frame(data = abalone[,9])
view abalone[,9]
view (abalone[,9])
View (abalone[,9])
View (abalone[,8])
View (abalone[,8:9])
View (abalone$Rings)
ggplot(meltData, aes("factor(variable)", abalone$Rings)) + geom_boxplot()
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
ggplot(meltData, aes("factor(variable)", abalone$Rings)) + geom_boxplot()
ggplot(meltData, aes("factor(variable)", abalone$Rings)) + geom_boxplot()
ggplot(meltData, aes(Rings)) + geom_boxplot()
ggplot(abalone, aes(Rings)) + geom_boxplot()
ggplot(abalone, aes("a",Rings)) + geom_boxplot()
ggplot(abalone, aes("Rings", Rings)) + geom_boxplot()
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
sum(1)
sum(2)
sum(1,2)
sum(c("a","B","a"))
sum(c("a","B","a")=="a")
c("a","B","a")=="a"
sum(c("a","B","a")=="a")
sum(abalone$Rings>20)
sum(abalone$Rings>0)
sum(abalone$Rings>15)
sum(abalone$Rings>16)
sum(abalone$Rings>17)
sum(abalone$Rings>18)
ggplot(abalone, aes(Sex, Rings)) + geom_histogram()
ggplot(abalone, aes(Rings)) + geom_histogram()
ggplot(abalone, aes(Rings)) + geom_histogram()
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(abalone, aes(Rings)) + geom_histogram()
ggplot(abalone, aes(Rings, bins = 30)) + geom_histogram()
ggplot(abalone, aes(Rings) + geom_histogram(bins = 30)
ggplot(abalone, aes(Rings) + geom_histogram(bins = 20)
ggplot(abalone, aes(Rings) + geom_histogram(bins = 20)
ggplot(abalone, aes(Rings) + geom_histogram(bins = 20)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 20)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 30)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 40)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 26)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 28)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(abalone, aes(Shell_weight)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Shell_weight, fill = Sex)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Shell_weight, fill = Sex)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Shell_weight, fill = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 500)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 40)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 35)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 20)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 10)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 25)
ggplot(abalone, aes(Shell_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly()
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Diameter,       colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Diameter,       colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Rings,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(x = Whole_weight, y = Rings))
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_line()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point() + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha=0.4)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha = 0.1)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha = 0)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha = 1)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0.1) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0.1)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_jitter(alpha = 0.1)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_poings(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_points(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_points(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0.2)
jitter
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shell_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Viscera_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shucked_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shell_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
myData = abalone[abalone$Height<0.3]
myData = abalone[,abalone$Height<0.3]
myData = abalone[abalone$Height<0.3,]
myData = abalone[abalone$Height<0.3,]
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(x = Height, y = Rings, color = Sex)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Diameter, y = Rings)) + geom_jitter(alpha = 0.2)
source('/home/cristian10/workspace/master/icd/final/src/analysis/analysis.R', echo=TRUE)
ggplot(abalone, aes(x = Length, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(x = Height, y = Rings, color = Sex)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
?corr
??correlation
cor
cor(abalone)
myData = melt(abalone)
myData = melt(myData)
View(myData)
myData = melt(abalone)
View(myData)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ .)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(. ~ variable)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ .)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ ., ncol = 4)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ ., ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap(variable ~ ., ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap(variable ~ , ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap(. ~ variable, ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 20) + facet_wrap( ~ variable, ncol = 1)
myData = melt(abalone[1:8,])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 20) + facet_wrap( ~ variable, ncol = 1)
myData = melt(abalone[,1:8])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 20) + facet_wrap( ~ variable, ncol = 1)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 1)
summary(abalone)  # Statistical momenta
ggplot(abalone, aes(Rings,          colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
myData = abalone[abalone$Height<0.3,]
myData = melt(myData[,1:8])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 1)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Diameter,       colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
myData = melt(abalone[abalone$Height<0.3,1:8])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 1)
ggplot(abalone, aes(Rings,          colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt(abalone)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt(abalone[abalone$Height<0.3,])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(abalone, aes(x = Shell_weight,   y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Viscera_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shucked_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight,   y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Diameter,       y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Length,         y = Rings)) + geom_jitter(alpha = 0.2)
# Remove outlayers before plotting Height
myData = abalone[abalone$Height<0.3,]
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap(Rings ~ ., ncol = 2, scales = "free")
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ Rings, ncol = 2, scales = "free")
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ , ncol = 2, scales = "free")
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2)
?melt
View(melt.data.frame(abalone, id.vars="Sex"))
View(melt.data.frame(abalone, id.vars=c("Sex")))
View(melt.data.frame(abalone, id.vars=c("Sex", "Rings")))
myData = melt.data.frame(abalone, id.vars=c("Sex", "Rings"))
View(myData)
ggplot(myData, aes(x = value, y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
ggplot(myData, aes(x = value, y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.02) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings, color = Sex)) + geom_jitter(alpha = 0.02) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
?jitter
jitter(myData[myData$variable=="Height"])
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
jitter(myData[,myData$variable=="Height"])
jitter(myData[myData$variable=="Height",])
myData[myData$variable=="Height",]
myData[myData$variable=="Height",]$value
jitter(myData[myData$variable=="Height",]$value)
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value, factor = 2)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value, factor = 3)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
abalone.reshaped = melt(abalone[abalone$Height<0.3,]) # Remove outlayers
ggplot(abalone.reshaped, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
