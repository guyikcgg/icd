myFit = lm(myModel, myTrain)
myResult = predict(myFit, myTest)
myData = myTest
myData$Rings = myResult
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type"),
measure.vars = "Rings"
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type")
View(myData)
source("../regression/build-workspace.R")
abalone.tra = lapply(abalone.tra, add.non.linearities)
abalone.tst = lapply(abalone.tst, add.non.linearities)
# Comparison
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
myTrain = abalone.tra[[1]]
myTest  = abalone.tst[[1]][sample(1:nrow(abalone.tst[[1]]), 50), ]
## Linear regression
# Plot some points of the last model
myFit = lm(myModel, myTrain)
myResult = predict(myFit, myTest)
myData = myTest
myData$Rings = myResult
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type"),
measure.vars = "Rings"
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type")
# Plot some points of the last model
myResult = kknn(myModel, myTrain, myTest, k = 7)
myData = myTest
myData$Rings = myResult$fitted.values
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type"),
measure.vars = "Rings"
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type")
myTest  = abalone.tst[[1]][sample(1:nrow(abalone.tst[[1]]), 20), ]
source('/home/cristian10/workspace/master/icd/final/src/regression/comparison.R', echo=TRUE)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData, data.type = "prediction", method = "lm")
myData1 = rbind(myData, cbind(myTest, data.type = "original value"), method = NA)
myData1 = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings"
)
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type")
View(myData1)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData, data.type = "prediction", method = "lm")
myData1 = rbind(myData, cbind(myTest, data.type = "original value"), method = NA)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData, data.type = "prediction", method = "lm")
myData1 = rbind(myData, cbind(myTest, data.type = "original value", method = NA))
myData1 = cbind(myData, data.type = "prediction", method = "lm")
View(myData1)
myData2 = cbind(myTest, data.type = "original value", method = NA)
View(myData2)
myTest  = abalone.tst[[1]][sample(1:nrow(abalone.tst[[1]]), 20), ]
View(myTest)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData, data.type = "prediction", method = "lm")
View(myData1)
myTest  = abalone.tst[[1]][sample(1:nrow(abalone.tst[[1]]), 20), ]
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = NA))
myData1 = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings",
preserve.na = TRUE
)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = NA))
myData1 = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings",
na.rm = FALSE
)
View(myData1)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = "none"))
myData1 = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings",
)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = "none"))
myData1 = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings"
)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = "none"))
myData1 = melt.data.frame(
data = myData1,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings"
)
myResult = predict(myFit, myTest)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = "none"))
myData1 = melt.data.frame(
data = myData1,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings"
)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = NA))
myData1 = melt.data.frame(
data = myData1,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings",
rm.na = F
)
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type")
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap(ncol = 1, labeller = method)
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap(ncol = 1, labeller = "method")
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap(~ method, ncol = 1)
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = "lm"))
myData1 = melt.data.frame(
data = myData1,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings",
rm.na = F
)
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap(~ method, ncol = 1)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "lm")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = "lm"))
myData1 = melt.data.frame(
data = myData1,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings",
rm.na = F
)
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap(~ method, ncol = 1)
source('/home/cristian10/workspace/master/icd/final/src/regression/comparison.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/regression/comparison.R', echo=TRUE)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type")
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap( ~ model, ncol = 1)
View(myData)
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap( ~ model, ncol = 1)
ggplot(myData1, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap( ~ method, ncol = 1)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap( ~ method, ncol = 1)
myTest = abalone.tst[[1]]
lmErrors  = predict(myFit, myTest)
knnErrors = kknn(myModel,  myTrain, myTest, k = 7)$fitted.values
myTest = abalone.tst[[1]]
lmErrors  = myTest$Rings-predict(myFit, myTest)
knnErrors = kknn(myModel,  myTrain, myTest, k = 7)$fitted.values
knnErrors = myTest$Rings-kknn(myModel,  myTrain, myTest, k = 7)$fitted.values
myTest = abalone.tst[[1]]
lmErrors  = myTest$Rings-predict(myFit, myTest)
knnErrors = myTest$Rings-kknn(myModel,  myTrain, myTest, k = 7)$fitted.values
myData1 = data.frame(method = "Linear Model", SqErr = lmErrors^2)
myData2 = data.frame(method = "k-NN", SqErr = knnErrors^2)
myData = melt.data.frame(
data = rbind(myData1, myData2),
id.vars = "method"
)
ggplot(myData) + geom_density()
ggplot(myData) + geom_density(aes(x=SqErr))
ggplot(myData) + geom_density(aes(x=value))
ggplot(myData) + geom_density(aes(x=value, color = method))
myTest = abalone.tst[[1]]
lmErrors  = myTest$Rings-predict(myFit, myTest)
knnErrors = myTest$Rings-kknn(myModel,  myTrain, myTest, k = 7)$fitted.values
myData1 = data.frame(method = "Linear Model", SqErr = lmErrors)
myData2 = data.frame(method = "k-NN", SqErr = knnErrors)
myData = melt.data.frame(
data = rbind(myData1, myData2),
id.vars = "method"
)
ggplot(myData) + geom_density(aes(x=value, color = method))
ggplot(myData) + geom_density(aes(x=value, fill = method))
ggplot(myData) + geom_density(aes(x=value, fill = method, alpha = 0.3))
ggplot(myData) + geom_density(aes(x=value, fill = method), alpha = 0.3)
ggplot(myData, aes(x=value)) +
geom_density(aes(color = method, fill = method), alpha = 0.3)
ggplot(myData, aes(x=value)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Error")
myData1 = data.frame(method = "Linear Model", Err = lmErrors)
myData2 = data.frame(method = "k-NN", Err = knnErrors)
myData = melt.data.frame(
data = rbind(myData1, myData2),
id.vars = "method"
)
ggplot(myData, aes(x=value)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Error")
testResults = read.csv("../regression/regr_test_alumnos.csv")
dim(testResults)
ncol(testResults)
testTable = cbind(testResults[, 2:ncol(testResults)])
testTable
testResults
testTable = testResults[, 2:ncol(testResults)]
testResults[, 2:ncol(testResults)] == cbind(testResults[,2:dim(testResults)[2]])
testResults = read.csv("../regression/regr_test_alumnos.csv")
testTable = testResults[, 2:ncol(testResults)]
rownames(testTable) = testResults[,1]
View(testTable)
trainResults = read.csv("../regression/regr_train_alumnos.csv")
trainTable = trainResults[, 2:ncol(testResults)]
rownames(trainTable) = trainResults[,1]
View(trainTable)
difs = (testTable[,1] - testTable[,2])/testTable[,1]
View(testTable)
wilc_1_2 = cbind(
ifelse((difs<0, abs(difs)+0.1), 0.1),
ifelse((difs>0, abs(difs)+0.1), 0.1)
wilc_1_2 = cbind(
ifelse(difs<0, abs(difs)+0.1, 0.1),
ifelse(difs>0, abs(difs)+0.1, 0.1)
)
View(wilc_1_2)
colnames(wilc_1_2) = colnames(testTable)[1:2]
View(wilc_1_2)
LMvsKNNtst = wilcox.test(wilc_1_2[,1], wilc_1_2[,2], alternative = "two.sided", paired = TRUE)
Rplus = LMvsKNNtst$statistic
pvalue = LMvsKNNtst$pvalue
WilcoxonTestOutput = cbind(Rmas, Rmenos, pvalue)
Rminus = LMvsKNNtst$statistic
WilcoxonTestOutput = cbind(Rplus, Rminus, pvalue)
View(WilcoxonTestOutput)
WilcoxonTestOutput = cbind(Rplus, Rminus, pvalue)
View(WilcoxonTestOutput)
View(WilcoxonTestOutput)
WilcoxonTestOutput
pvalue
pvalue = LMvsKNNtst$pvalue
WilcoxonTestOutput = cbind(Rplus, Rminus, pvalue)
pvalue
pvalue = LMvsKNNtst$p.value
WilcoxonTestOutput = cbind(Rplus, Rminus, pvalue)
FriedmanTest = friedman.test(as.matrix(testTable))
FriedmanTest
FriedmanTest$statistic
FriedmanTest$method
wilc_1_2 = cbind(
ifelse(difs<0, abs(difs)+0.1, 0.1),
ifelse(difs>0, abs(difs)+0.1, 0.1)
)
View(wilc_1_2)
LMvsKNNtst = wilcox.test(
wilc_1_2[,1],
wilc_1_2[,2],
alternative = "two.sided",
paired = TRUE
)
Rplus  = LMvsKNNtst$statistic
pvalue = LMvsKNNtst$p.value
LMvsKNNtst = wilcox.test(
wilc_1_2[,2],
wilc_1_2[,1],
alternative = "two.sided",
paired = TRUE
)
Rminus = LMvsKNNtst$statistic
WilcoxonTestOutput = cbind(Rplus, Rminus, pvalue)
View(WilcoxonTestOutput)
## Comparison amongst LM, kNN and M5'
FriedmanTest = friedman.test(as.matrix(testTable))
FriedmanTest
testTable
FriedmanTest = friedman.test(as.matrix(trainTable))
FriedmanTest
FriedmanTest = friedman.test(as.matrix(testTable))
FriedmanTest
groups = rep(1:ncol(testTable), each = nrow(testTable))
groups
pairwise.wilcox.test(as.matrix(testTable), groups, p.adjust.method = "holm", paired = TRUE)
testTable
as.matrix(testTable)
source('/home/cristian10/workspace/master/icd/final/src/regression/comparison.R', echo=TRUE)
pairwise.wilcox.test(
as.matrix(trainTable),
groups,
p.adjust.method = "holm",
paired = TRUE
)
colnames(wilc_1_2) = colnames(testTable)[1:2]
difs = (testTable[,1] - testTable[,2])/testTable[,1]
wilcox.test(lmErrors, knnErrors, paired = TRUE)
wilcox.test(lmErrors, knnErrors, paired = FALSE)
ks.test(lmErrors, knnErrors)
wilcox.test(lmErrors, knnErrors, paired = FALSE)
wilcox.test(lmErrors^2, knnErrors^2, paired = FALSE)
wilcox.test(lmErrors^2, knnErrors^2, paired = TRUE)
ks.test(lmErrors^2, knnErrors^2)
ggplot(myData, aes(x=value^2)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Error")
ggplot(myData, aes(x=value^2)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Error") + xlim(0,50)
ggplot(myData, aes(x=value^2)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Error") + xlim(0,35)
ggplot(myData, aes(x=value^2)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Error") + xlim(0,20)
wilcox.test(lmErrors^2, knnErrors^2, paired = TRUE)
wilcox.test(lmErrors^2, knnErrors^2, paired = FALSE)
ks.test(lmErrors^2, knnErrors^2)
wilcox.test(lmErrors^2, knnErrors^2, paired = FALSE)
myData1 = data.frame(method = "Linear Model", Err = lmErrors)
myData2 = data.frame(method = "k-NN", Err = knnErrors)
myData = melt.data.frame(
data = rbind(myData1, myData2),
id.vars = "method"
)
# Build the workspace
source("../regression/build-workspace.R")
abalone.tra = lapply(abalone.tra, add.non.linearities)
abalone.tst = lapply(abalone.tst, add.non.linearities)
# Comparison of data points
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
myTrain = abalone.tra[[1]]
myTest  = abalone.tst[[1]][sample(1:nrow(abalone.tst[[1]]), 20), ]
## Linear regression
# Plot some points of the last model
myFit = lm(myModel, myTrain)
myResult = predict(myFit, myTest)
myData1 = myTest
myData1$Rings = myResult
myData1 = cbind(myData1, data.type = "prediction", method = "Linear Model")
myData1 = rbind(myData1, cbind(myTest, data.type = "original value", method = "Linear Model"))
myData1 = melt.data.frame(
data = myData1,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings"
)
## k-NN
# Plot some points of the last model
myResult = kknn(myModel, myTrain, myTest, k = 7)
myData2 = myTest
myData2$Rings = myResult$fitted.values
myData2 = cbind(myData2, data.type = "prediction", method = "k-NN")
myData2 = rbind(myData2, cbind(myTest, data.type = "original value", method = "k-NN"))
myData2 = melt.data.frame(
data = myData2,
id.vars = c("Shell_weight", "data.type", "method"),
measure.vars = "Rings"
)
## Plot
myData = rbind(myData1, myData2)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
xlab("Shell weight") +
geom_line(aes(group = Shell_weight, color = "error")) +
labs(color = "Data type") +
facet_wrap( ~ method, ncol = 1)
geom_line(aes(group = Shell_weight, color = "error")) +
;
# Error distribution
myTest = abalone.tst[[1]]
lmErrors  = myTest$Rings-predict(myFit, myTest)
knnErrors = myTest$Rings-kknn(myModel, myTrain, myTest)$fitted.values
myData1 = data.frame(method = "Linear Model", Err = lmErrors)
myData2 = data.frame(method = "k-NN", Err = knnErrors)
myData = melt.data.frame(
data = rbind(myData1, myData2),
id.vars = "method"
)
### Tests
wilcox.test(lmErrors^2, knnErrors^2, paired = FALSE)
ks.test(lmErrors^2, knnErrors^2)
ggplot(myData, aes(x=value^2)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Error") + xlim(0,20)
ggplot(myData, aes(x=value^2)) +
geom_density(aes(color = method, fill = method), alpha = 0.3) +
xlab("Squared error") + xlim(0,20)
?wilcox.test
?pairwise.wilcox.test
FriedmanTest = friedman.test(as.matrix(testTable))
friedman.test(as.matrix(testTable))
WilcoxonTestOutput = cbind(Rplus, Rminus, pvalue)
