tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length *
Height *
Whole_weight *
Shucked_weight *
Viscera_weight *
Shell_weight,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
poly(Length, 2) *
poly(Height, 2) *
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
poly(Length, 1) *
poly(Height, 2) *
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
poly(Length, 2) *
poly(Height, 1) *
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
poly(Length, 1) *
poly(Height, 1) *
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length *
Height *
Diameter *
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length +
Height *
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
poly(Length, 2) +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length +
poly(Height,2) +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length +
Height +
Whole_weight.log +
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
# Add interactions
myFit = lm(
Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
abalone
)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length *
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
myFit = lm(
Rings ~
Length *
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
abalone
)
summary(myFit)
# Add interactions
myFit = lm(
Rings ~
Length *
Height *
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
abalone
)
summary(myFit)
# Add interactions
myFit = lm(
Rings ~
Length * Whole_weight.log +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
abalone
)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = Rings~
Length * Whole_weight.log +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
tt = tt
))
}
myFit = lm(
Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3,
abalone
)
summary(myFit)
myModel = Rings ~
Length +
Height +
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = myModel,
tt = tt
))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = myModel,
tt = tt
))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Viscera_weight.log *
Shell_weight.3
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(
1:5,
run_lm_fold,
model = myModel,
tt = tt
))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.log *
Shell_weight.3
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Shell_weight.3
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Shell_weight.3 +
Viscera_weight
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
# Add interactions
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Shell_weight.3
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight.3 *
Shell_weight.3
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
# Add interactions
myModel = Rings ~
Length +
Height +
Whole_weight.3 *
Shucked_weight.3 *
Viscera_weight.3 *
Shell_weight.3
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Viscera_weight.log
Shell_weight.3
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Viscera_weight.log *
Shell_weight.3
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
myModel = Rings ~
Length +
Height +
Whole_weight.2 *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
# Add interactions
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
myFit = lm(myModel, abalone)
summary(myFit)
MSE = matrix(nrow = 1, ncol = 2)
colnames(MSE) = c("train", "test")
for (tt in colnames(MSE)) {
MSE[1, tt] = mean(sapply(1:5, run_lm_fold, model = myModel, tt = tt))
}
