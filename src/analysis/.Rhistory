ggplot(abalone, aes(Rings,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(x = Whole_weight, y = Rings))
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_line()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point() + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha=0.4)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha = 0.1)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha = 0)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(aes(alpha = 1)) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0.1) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0) + geom_jitter()
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0.1)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_jitter(alpha = 0.1)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_poings(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_points(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_points(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_point(alpha = 0.2)
jitter
ggplot(abalone, aes(x = Whole_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shell_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Viscera_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shucked_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shell_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
myData = abalone[abalone$Height<0.3]
myData = abalone[,abalone$Height<0.3]
myData = abalone[abalone$Height<0.3,]
myData = abalone[abalone$Height<0.3,]
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(x = Height, y = Rings, color = Sex)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Diameter, y = Rings)) + geom_jitter(alpha = 0.2)
source('/home/cristian10/workspace/master/icd/final/src/analysis/analysis.R', echo=TRUE)
ggplot(abalone, aes(x = Length, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(x = Height, y = Rings, color = Sex)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
?corr
??correlation
cor
cor(abalone)
myData = melt(abalone)
myData = melt(myData)
View(myData)
myData = melt(abalone)
View(myData)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ .)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(. ~ variable)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ .)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ ., ncol = 4)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_grid(variable ~ ., ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap(variable ~ ., ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap(variable ~ , ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap(. ~ variable, ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 20) + facet_wrap( ~ variable, ncol = 1)
myData = melt(abalone[1:8,])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 20) + facet_wrap( ~ variable, ncol = 1)
myData = melt(abalone[,1:8])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 20) + facet_wrap( ~ variable, ncol = 1)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 1)
summary(abalone)  # Statistical momenta
ggplot(abalone, aes(Rings,          colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
myData = abalone[abalone$Height<0.3,]
myData = melt(myData[,1:8])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 1)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Diameter,       colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
myData = melt(abalone[abalone$Height<0.3,1:8])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 1)
ggplot(abalone, aes(Rings,          colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 50) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt(abalone)
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt(abalone[abalone$Height<0.3,])
ggplot(myData, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(abalone, aes(x = Shell_weight,   y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Viscera_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shucked_weight, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Whole_weight,   y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Diameter,       y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Length,         y = Rings)) + geom_jitter(alpha = 0.2)
# Remove outlayers before plotting Height
myData = abalone[abalone$Height<0.3,]
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap(Rings ~ ., ncol = 2, scales = "free")
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ Rings, ncol = 2, scales = "free")
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ , ncol = 2, scales = "free")
ggplot(myData, aes(y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2)
?melt
View(melt.data.frame(abalone, id.vars="Sex"))
View(melt.data.frame(abalone, id.vars=c("Sex")))
View(melt.data.frame(abalone, id.vars=c("Sex", "Rings")))
myData = melt.data.frame(abalone, id.vars=c("Sex", "Rings"))
View(myData)
ggplot(myData, aes(x = value, y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
ggplot(myData, aes(x = value, y = Rings, colour = Sex)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.2) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.02) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings, color = Sex)) + geom_jitter(alpha = 0.02) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
?jitter
jitter(myData[myData$variable=="Height"])
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
jitter(myData[,myData$variable=="Height"])
jitter(myData[myData$variable=="Height",])
myData[myData$variable=="Height",]
myData[myData$variable=="Height",]$value
jitter(myData[myData$variable=="Height",]$value)
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value, factor = 2)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value, factor = 3)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
abalone.reshaped = melt(abalone[abalone$Height<0.3,]) # Remove outlayers
ggplot(abalone.reshaped, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
sapply(abalone2, min)             # Minimum
# Load required libraries
library(utils)
library(stats)
library(foreign)
library(ggplot2)
library(reshape)
# ABALONE
# Load the dataset and provide it with the
# structure from Keel
abalone = read.csv(
"datasets/abalone/abalone.dat",
comment.char="@"
)
names(abalone) = c(
"Sex",
"Length",
"Diameter",
"Height",
"Whole_weight",
"Shucked_weight",
"Viscera_weight",
"Shell_weight",
"Rings"
)
abalone$Sex = factor(
abalone$Sex,
levels = c(1, 2, 3),
labels = c("M", "F", "I")
)
# Get the data type and dimension
class(abalone)
dim(abalone)
# Get the data types of every field
lapply(abalone, class)
# Check if there are missing values
colSums(is.na(abalone))
# Get the statistical measurements (numeric variables)
abalone2 = subset(abalone, select = -Sex)
sapply(abalone2, min)             # Minimum
summary(abalone)  # Statistical measurements
sapply(abalone2, min)             # Minimum
sapply(abalone2, quantile, 0.25)  # 1st Quartile
sapply(abalone2, median)          # Median
abalone.statistical.measurements = matrix(nrow = col(abalone2), ncol = 8)
View(abalone.statistical.measurements)
col(abalone2)
ncol(abalone2)
abalone.statistical.measurements = matrix(nrow = ncol(abalone2), ncol = 8)
ans
$
out
a.s.m[1,] = sapply(abalone2, min)             # Minimum
a.s.m = matrix(
nrow = ncol(abalone2),
ncol = 8
)
a.s.m[1,] = sapply(abalone2, min)             # Minimum
View(a.s.m)
a.s.m[,1] = sapply(abalone2, min)             # Minimum
?names
names(a.s.m)
summary(abalone)  # Statistical measurements
names(a.s.m) = c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max.", "Var.", "SD")
names(a.s.m)
rownames(a.s.m) = c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max.", "Var.", "SD")
a.s.m = matrix(
nrow = ncol(abalone2),
ncol = 8
)
colnames(a.s.m) = c(
"Min.",
"1st Qu.",
"Median",
"Mean",
"3rd Qu.",
"Max.",
"Var.",
"SD"
)
rownames(a.s.m) = names(abalone2)
a.s.m[,1] = sapply(abalone2, min)             # Minimum
sapply(abalone2, min)             # Minimum
a.s.m[,1] =
sapply(abalone2, min)             # Minimum
a.s.m[,2] =
sapply(abalone2, quantile, 0.25)  # 1st Quart.
a.s.m[,3] =
sapply(abalone2, median)          # Median
a.s.m[,4] =
sapply(abalone2, mean)            # Mean
a.s.m[,5] =
sapply(abalone2, quantile, 0.75)  # 3rd Quart.
a.s.m[,6] =
sapply(abalone2, max)             # Max
a.s.m[,7] =
sapply(abalone2, var)             # Variance
a.s.m[,8] =
sapply(abalone2, sd)              # Std. dev.
summary(abalone)  # Statistical measurements
table(abalone$Sex)
as.data.frame(table(abalone$Sex))
?table
as.data.frame(ftable(abalone$Sex))
?with
attach(tae)
detach(tae)
library(utils)
library(stats)
library(foreign)
library(ggplot2)
library(reshape)
# TAE
# Load the dataset and provide it with the
# structure from Keel
tae = read.csv(
"datasets/tae/tae.dat",
comment.char="@"
)
names(tae) = c(
"Native",
"Instructor",
"Course",
"Semester",
"Size",
"Class"
)
tae$Class      = factor(
tae$Class,
levels = c(1,2,3),
labels = c("low", "medium", "high")
)
tae$Native     = factor(
tae$Native,
levels = c(1,2),
labels = c(
"English speaker",
"non-English speaker"
)
)
tae$Semester   = factor(
tae$Semester,
levels = c(1,2),
labels = c("Summer", "Regular")
)
tae$Instructor = factor(tae$Instructor)
tae$Course     = factor(tae$Course)
# Get the data type and dimension
class(tae)
dim(tae)
# Get the data types of every field
lapply(tae, class)
# Check if there are missing values
colSums(is.na(tae))
# Get the statistical measurements (numeric variables)
attach(tae)
min       (Size)        # Minimum
quantile  (Size, 0.25)  # 1st Quartile
median    (Size)        # Median
mean      (Size)        # Mean
quantile  (Size, 0.75)  # 3rd Quartile
max       (Size)        # Max
var       (Size)        # Variane
sd        (Size)        # Standard deviation
detach(tae)
# Get summarized information
str(tae)      # Structure
a.s.m2 = as.data.frame( table(abalone$Sex) )
names(a.s.m2)[1] = "Sex"
a.s.m2
a.s.m2$relFreq = a.s.m2$Freq/nrows(abalone)
a.s.m2$relFreq = a.s.m2$Freq/nrow(abalone)
a.s.m2
View(a.s.m2)
ggplot(abalone, aes(x = Sex)) + geom_bar(stat = "count")
meltData = melt.data.frame(data = abalone[,2:8])
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(abalone, aes(x = Sex)) + geom_bar(stat = "count")
ggplot(abalone, aes(x = Sex)) + geom_bar(stat = "count", colors = Sex)
ggplot(abalone, aes(x = Sex, color = Sex)) + geom_bar(stat = "count")
ggplot(abalone, aes(x = Sex, fill = Sex)) + geom_bar(stat = "count")
meltData = melt.data.frame(data = abalone[,2:8])
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Shell_weight)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Diameter,       colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Rings,          colour = Sex)) + geom_freqpoly(bins = 29)
abalone.reshaped = melt(abalone[abalone$Height<0.3,]) # Remove outlayers
ggplot(abalone.reshaped, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
# Histograms show that Male-Female distinction is not relevant, and does not characterize any of the above variables.
# Nonetheless, Infants' dimensions are usually lower, as it is their age.
# Statistical test is needed to confirm this statement.
ggplot(abalone, aes(x = Shell_weight,   y = Rings)) + geom_jitter(alpha = 0.2)
myData = abalone[abalone$Height<0.3,]
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value, factor = 3)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(abalone, aes(x = Sex, fill = Sex)) + geom_bar(stat = "count")
meltData = melt.data.frame(data = abalone[,2:8])
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
meltData = melt.data.frame(data = abalone[,2:6])
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
meltData = melt.data.frame(data = abalone[,2:4])
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip()
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip() + ylab("")
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + coord_flip() + ylab("asdf")
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + ylab("asdf") + coord_flip()
ggplot(meltData, aes(factor(variable), value)) + geom_boxplot() + xlab("") + coord_flip()
ggplot(meltData, aes(factor(variable), value)) + xlab("") + geom_boxplot() + coord_flip()
meltData = melt.data.frame(data = abalone[,5:8])
ggplot(meltData, aes(factor(variable), value)) + xlab("") + geom_boxplot() + coord_flip()
meltData = melt.data.frame(data = abalone[,2:4])
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("length (mm)") + geom_boxplot() + coord_flip()
meltData = melt.data.frame(data = abalone[,5:8])
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip()
meltData = melt.data.frame(data = abalone[,5:8])
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip()
meltData = melt.data.frame(data = abalone[,2:4])
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("length (mm)") + geom_boxplot() + coord_flip()
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
meltData1 = melt.data.frame(data = abalone[,2:4])
meltData1$Measure = "length (mm)"
ggplot(meltData1, aes(factor(variable), value)) + xlab("") + ylab("length (mm)") + geom_boxplot() + coord_flip()
meltData2 = melt.data.frame(data = abalone[,5:8])
meltData2$Measure = "weight (grams)"
ggplot(meltData2, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip()
merge(meltData1, meltData2)
View(meltData)
meltData1 = melt.data.frame(data = abalone[,2:4])
meltData1$Measure = "length (mm)"
View(meltData1)
meltData2 = melt.data.frame(data = abalone[,5:8])
meltData2$Measure = "weight (grams)"
ggplot(meltData2, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip()
rbind(meltData1, meltData2)
meltData = rbind(meltData1, meltData2)
View(meltData)
ggplot(meltData2, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip() + facet_wrap( ~ Measure, ncol = 2, scales = "free")
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip() + facet_wrap( ~ Measure, ncol = 2, scales = "free")
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip() + facet_wrap( ~ Measure, ncol = 1, scales = "free")
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("") + geom_boxplot() + coord_flip() + facet_wrap( ~ Measure, ncol = 1, scales = "free")
40*4
4000/160
ggplot(abalone, aes(x = Sex, fill = Sex)) + geom_bar(stat = "count")
# Categorical variables (barplots)
ggplot(abalone, aes(x = Sex, fill = Sex)) + geom_bar(stat = "count")
meltData1 = melt.data.frame(data = abalone[,2:4])
meltData1$Measure = "length (mm)"
ggplot(meltData1, aes(factor(variable), value)) + xlab("") + ylab("length (mm)") + geom_boxplot() + coord_flip()
meltData2 = melt.data.frame(data = abalone[,5:8])
meltData2$Measure = "weight (grams)"
ggplot(meltData2, aes(factor(variable), value)) + xlab("") + ylab("weight (grams)") + geom_boxplot() + coord_flip()
meltData = rbind(meltData1, meltData2)
ggplot(meltData, aes(factor(variable), value)) + xlab("") + ylab("") + geom_boxplot() + coord_flip() + facet_wrap( ~ Measure, ncol = 1, scales = "free")
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Shell_weight)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Shell_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Viscera_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Shucked_weight, colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Whole_weight,   colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Height,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Diameter,       colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Length,         colour = Sex)) + geom_freqpoly(bins = 29)
ggplot(abalone, aes(Rings,          colour = Sex)) + geom_freqpoly(bins = 29)
abalone.reshaped = melt(abalone[abalone$Height<0.3,]) # Remove outlayers
ggplot(abalone.reshaped, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ggplot(abalone, aes(Shell_weight)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Rings)) + geom_histogram(bins = 29)
ggplot(abalone, aes(Sex, Rings)) + geom_boxplot()
ggplot(abalone.reshaped, aes(value, colour = Sex)) + geom_freqpoly(bins = 29) + facet_wrap( ~ variable, ncol = 2, scales = "free")
#
ggplot(abalone, aes(x = Shell_weight,   y = Rings)) +
geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Viscera_weight, y = Rings)) +
geom_jitter(alpha = 0.2)
ggplot(abalone, aes(x = Shucked_weight, y = Rings)) +
geom_jitter(alpha = 0.2)
myData = abalone[abalone$Height<0.3,]
ggplot(myData, aes(x = Height, y = Rings)) + geom_jitter(alpha = 0.2)
myData = melt.data.frame(abalone[abalone$Height<0.3,], id.vars=c("Sex", "Rings"))
myData[myData$variable=="Height",]$value = jitter(myData[myData$variable=="Height",]$value, factor = 3)
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
with(myData[myData$variable=="Height",]$value, jitter(factor = 3)
with(myData[myData$variable=="Height",]$value, jitter(factor = 3))
with(myData[myData$variable=="Height",]$value, jitter(factor = 3))
with(myData[myData$variable=="Height",]$value, jitter(expr, factor = 3))
?with
with(myData[myData$variable=="Height",]$value, jitter, factor = 3)
within(myData[myData$variable=="Height",]$value, jitter, factor = 3)
with(myData[myData$variable=="Height",]$value, jitter, factor = 3)
within(myData[myData$variable=="Height",], {
value = jitter(value, factor = 3)
})
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
within(myData[myData$variable=="Height",], {
value = jitter(value, factor = 3)
})
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
ifelse
ifelse(1 == 2, TRUE, F)
ifelse(1 == 1, TRUE, F)
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
myData = within(myData, {
if(myData$variable=="Height") {
value = jitter(value, factor = 3)
}
})
myData = within(myData, {
if(variable=="Height") {
value = jitter(value, factor = 3)
}
})
?if
;
help if
help for
?for
;
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
myData = within(myData, {
if(variable=="Height") value = jitter(value, factor = 3)
})
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
myData = within(myData, {
ifelse(variable=="Height", value = jitter(value, factor = 3))
})
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
myData = within(myData, {
ifelse(variable=="Height", value = jitter(value, factor = 3), value = value)
})
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
myData = within(myData, {
value = jitter(value, factor = 3)#, value = value)
})
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
# Scatterplots
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
myData = within(myData, {
value = jitter(value, factor = 10)#, value = value)
})
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
# Scatterplots
myData = melt.data.frame(
abalone[abalone$Height<0.3,],
id.vars=c("Sex", "Rings")
)
myData[myData$variable=="Height",] = within(myData[myData$variable=="Height",], {
value = jitter(value, factor = 3)
})
ggplot(myData, aes(x = value, y = Rings)) + geom_jitter(alpha = 0.03) + facet_wrap( ~ variable, ncol = 2, scales = "free")
