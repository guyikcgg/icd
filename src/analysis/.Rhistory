model = Rings~.,
tt = tt,
k = i   # Modify k
))
}
}
MSE$model = as.character(myModel)[3]
MSE.record = rbind(MSE.record, MSE)
myData = melt.data.frame(
MSE,
id.vars = "k"
)
names(myData) = c("k", "Data", "MSE")
ggplot(myData, aes(x = k, y = MSE, color = Data)) +
geom_point() + geom_line ()
myData = melt.data.frame(
MSE,
id.vars = c("k", "model")
)
names(myData) = c("k", "Data", "MSE")
ggplot(myData, aes(x = k, y = MSE, color = Data)) +
geom_point() + geom_line ()
names(myData) = c("k", "model", "Data", "MSE")
ggplot(myData, aes(x = k, y = MSE, color = Data)) +
geom_point() + geom_line ()
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),variable_name = "MSE"
)
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data",
measure.vars = "MSE"
)
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data",
measure.vars = c("train", "test")
)
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = MSE, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
View(MSE.record)
abalone.tra = lapply(abalone.tra, function(df){return(df[,1:9])})
abalone.tst = lapply(abalone.tst, function(df){return(df[,1:9])})
source('/home/cristian10/workspace/master/icd/final/src/regression/knn-regression.R', echo=TRUE)
View(MSE.record)
# Multiple variables
abalone = abalone[,1:9]
abalone.tra = lapply(abalone.tra, function(df){return(df[,1:9])})
abalone.tst = lapply(abalone.tst, function(df){return(df[,1:9])})
MSE.record = data.frame()
myModel = Rings~.
k = 1:20
MSE = data.frame(k)
for (tt in c("train", "test")) {
for (i in k) {
MSE[i, tt] = mean(sapply(
1:5,
run_knn_fold,
model = myModel,
tt = tt,
k = i   # Modify k
))
}
}
MSE$model = as.character(myModel)[3]
MSE.record = rbind(MSE.record, MSE)
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
## No interactions
myModel = Rings ~
Diameter +
Height +
Whole_weight +
Shucked_weight +
Viscera_weight +
Shell_weight
k = 1:20
MSE = data.frame(k)
for (tt in c("train", "test")) {
for (i in k) {
MSE[i, tt] = mean(sapply(
1:5,
run_knn_fold,
model = myModel,
tt = tt,
k = i   # Modify k
))
}
}
MSE$model = as.character(myModel)[3]
MSE.record = rbind(MSE.record, MSE)
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
## Non-linearities
abalone = add.non.linearities(abalone)
abalone.tra = lapply(abalone.tra, add.non.linearities)
abalone.tst = lapply(abalone.tst, add.non.linearities)
myModel = Rings ~
Length +
Height +
Whole_weight.log +
Shucked_weight.log +
Viscera_weight.log +
Shell_weight.3
k = 1:20
MSE = data.frame(k)
for (tt in c("train", "test")) {
for (i in k) {
MSE[i, tt] = mean(sapply(
1:5,
run_knn_fold,
model = myModel,
tt = tt,
k = i   # Modify k
))
}
}
MSE$model = as.character(myModel)[3]
MSE.record = rbind(MSE.record, MSE)
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
source('/home/cristian10/workspace/master/icd/final/src/regression/knn-regression.R', echo=TRUE)
rities (poly)
abalone = add.non.linearities(abalone)
abalone.tra = lapply(abalone.tra, add.non.linearities)
abalone.tst = lapply(abalone.tst, add.non.linearities)
myModel = Rings ~
poly(Length, 2) +
poly(Height, 2) +
poly(Whole_weight, 2) +
poly(Shucked_weight, 2) +
poly(Viscera_weight, 2) +
poly(Shell_weight, 2)
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE)
myModel = Rings ~
poly(Length, 2) +
poly(Height, 2) +
poly(Whole_weight, 2) +
poly(Shucked_weight, 2) +
poly(Viscera_weight, 2) +
poly(Shell_weight, 2)
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE)
myModel = Rings ~
poly(Length, 3) +
poly(Height, 3) +
poly(Whole_weight, 3) +
poly(Shucked_weight, 3) +
poly(Viscera_weight, 3) +
poly(Shell_weight, 3)
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE)
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE)
source('/home/cristian10/workspace/master/icd/final/src/regression/knn-regression.R', echo=TRUE)
myData$Data = paste(myData$Data, "in", myData$model)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
View(myData)
myData = melt.data.frame(
MSE.record,
id.vars = c("k", "model"),
variable_name = "Data"
)
myData$LOL = paste(myData$Data, "in", myData$model)
myData$Data = paste(myData$Data, "in", myData$model)
## Compare k
myData = melt.data.frame(
MSE.record,
id.vars = c("k", "model"),
variable_name = "Data"
)
myData$Data = paste(myData$Data, "in", myData$model)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") + theme(legend.position = "bottom")
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") + theme(legend.position = "bottom"m legend.direction = "vertical")
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") + theme(legend.position = "bottom", legend.direction = "vertical")
myData = melt.data.frame(
subset(MSE.record, select = -train),
id.vars = c("k", "model"),
variable_name = "Data"
)
myData$Data = paste(myData$Data, "in", myData$model)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") + theme(legend.position = "bottom", legend.direction = "vertical")
myData = subset(MSE.record, select = -train)
myData = myData[myData$k>2]
myData = myData[,myData$k>2]
myData = myData[myData$k>2,]
myData = melt.data.frame(
myData,
id.vars = c("k", "model"),
variable_name = "Data"
)
myData$Data = paste(myData$Data, "in", myData$model)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") + theme(legend.position = "bottom", legend.direction = "vertical")
myData$Data = paste(myData$Data, " in ", myData$model)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") + theme(legend.position = "bottom", legend.direction = "vertical")
sample(1:5, 5)
sample(1:5, 6)
myTest = sample(abalone, 50)
myTest = sample(abalone, 50)
abalone
sample(abalone,1)
sample(abalone[,],1)
which(abalone)
which(abalone!=0)
which(abalone$Sex!=0)
myTest = abalone[sample(1:length(abalone), 20), ]
myResult = kknn(myModel, abalone.tra, myTest, k = 7)
myTest
myTest = abalone[sample(1:length(abalone), 2), ]
myTest
View(myTest)
myResult = kknn(myModel, abalone.tra, myTest, k = 7)
myResult = kknn(myModel, abalone.tra[[1]], myTest, k = 7)
myTest = abalone[sample(1:length(abalone), 10), ]
myResult = kknn(myModel, abalone.tra[[1]], myTest, k = 7)
myData = cbind(myTest, myResult$fitted.values)
View(myData)
geom_point(aes(x = Shell_weight, y = Rings)) +
geom_point(aes(x = Shell_weight, y = myResult$fitted.values))
fv = myResult$fitted.values
myData = cbind(myTest, fv)
ggplot(myData) +
geom_point(aes(x = Shell_weight, y = Rings)) +
geom_point(aes(x = Shell_weight, y = fv))
ggplot(myData) +
geom_point(aes(x = Shell_weight, y = Rings), color = Data) +
geom_point(aes(x = Shell_weight, y = fv), color = b)
ggplot(myData) +
geom_point(aes(x = Shell_weight, y = Rings, color = Data)) +
geom_point(aes(x = Shell_weight, y = fv, color = b))
Data = "value"
b = "prediction"
ggplot(myData) +
geom_point(aes(x = Shell_weight, y = Rings, color = Data)) +
geom_point(aes(x = Shell_weight, y = fv, color = b))
ggplot(myData) +
geom_point(aes(x = Shell_weight, y = Rings, color = Data)) +
geom_point(aes(x = Shell_weight, y = fv, color = b)) +
geom_line(aes(group = Shell_weight))
d3 <- rep(1:10,2)
d3
d3 = rep(myData$Shell_weight, 2)
ggplot(myData) +
geom_point(aes(x = Shell_weight, y = Rings, color = Data)) +
geom_point(aes(x = Shell_weight, y = fv, color = b)) +
geom_line(aes(group = d3))
geom_line(aes(group = myData$Shell_weight))
ggplot(myData) +
geom_point(aes(x = Shell_weight, y = Rings, color = Data)) +
geom_point(aes(x = Shell_weight, y = fv, color = b)) +
geom_line(aes(group = myData$Shell_weight))
d1 <- runif(10,10,15)
d2 <- runif(10,25,30)
d3 <- rep(1:10,2)
df <- data.frame(x = d3, y = c(d1,d2))
View(df)
df
df$y
myData = myTest
myData$Rings = myResult$fitted.values
myData = cbind(myData, "prediction")
myData = rbind(myData, cbind(myTest, "original value"))
myData = myTest
myData$Rings = myResult$fitted.values
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = "data.type"
)
warning(
)
warnings()
myData = melt.data.frame(
data = myData,
id.vars = "data.type"
)
myData = myTest
myData$Rings = myResult$fitted.values
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = "data.type"
)
warnings()
View(myData)
myData = myTest
myData$Rings = myResult$fitted.values
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = "data.type",
measure.vars = "Rings"
)
myData = myTest
myData$Rings = myResult$fitted.values
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = "data.type",
measure.vars = c("Shell_weight", "Rings")
)
myData = myTest
myData$Rings = myResult$fitted.values
myData = cbind(myData, data.type = "prediction")
myData = rbind(myData, cbind(myTest, data.type = "original value"))
myData = melt.data.frame(
data = myData,
id.vars = c("Shell_weight", "data.type"),
measure.vars = c( "Rings")
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
geom_line(aes(group = myData$Shell_weight))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_line(aes(group = myData$Shell_weight))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings")
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_line(aes(group = myData$Shell_weight))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_line(aes(group = myData$Shell_weight, color = "black"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(group = myData$Shell_weight, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = 0, yend = 0, group = myData$Shell_weight, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = 0, yend = 0, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = 0, yend = 5, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = Shell_weight, yend = 5, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = Shell_weight, yend = value, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = Shell_weight, yend = value, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = Shell_weight, yend = myData[which(myData$data.type=="prediction"),]$value, color = "error"))
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(xend = Shell_weight, yend = myData[which(myData$data.type=="original value"),]$value, color = "error"))
myData[which(myData$data.type=="original value"),]$value
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(x = myData[which(myData$data.type=="original value"),]$Shell_weight
y = myData[which(myData$data.type=="original value"),]$value,
xend = myData[which(myData$data.type=="prediction"),]$Shell_weight,
yend = myData[which(myData$data.type=="prediction"),]$value,
color = "error")
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(x = myData[which(myData$data.type=="original value"),]$Shell_weight
y = myData[which(myData$data.type=="original value"),]$value,
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(x = myData[which(myData$data.type=="original value"),]$Shell_weight,
y = myData[which(myData$data.type=="original value"),]$value,
xend = myData[which(myData$data.type=="prediction"),]$Shell_weight,
yend = myData[which(myData$data.type=="prediction"),]$value,
color = "error")
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(data = 1:10, aes(x = myData[which(myData$data.type=="original value"),]$Shell_weight,
y = myData[which(myData$data.type=="original value"),]$value,
xend = myData[which(myData$data.type=="prediction"),]$Shell_weight,
yend = myData[which(myData$data.type=="prediction"),]$value,
color = "error")
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(data = data.frame(1:10), aes(x = myData[which(myData$data.type=="original value"),]$Shell_weight,
y = myData[which(myData$data.type=="original value"),]$value,
xend = myData[which(myData$data.type=="prediction"),]$Shell_weight,
yend = myData[which(myData$data.type=="prediction"),]$value,
color = "error")
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(data = data.frame(1:10), aes(x = myData[which(myData$data.type=="original value"),]$Shell_weight,
y = myData[which(myData$data.type=="original value"),]$value,
xend = myData[which(myData$data.type=="prediction"),]$Shell_weight,
yend = myData[which(myData$data.type=="prediction"),]$value,
color = "error")
)
require(gridExtra)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
geom_point() +
ylab("Rings") +
geom_segment(aes(x = myData[which(myData$data.type=="original value"),]$Shell_weight,
y = myData[which(myData$data.type=="original value"),]$value,
xend = myData[which(myData$data.type=="prediction"),]$Shell_weight,
yend = myData[which(myData$data.type=="prediction"),]$value,
color = "error")
)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings") +
ylab("Rings")
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings")
detach("package:gridExtra", unload=TRUE)
ggplot(myData, aes(x = Shell_weight, y = value, color = data.type)) +
geom_point() +
ylab("Rings")
