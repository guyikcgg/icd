)
as.matrix(testTable)
rep(1:ncol(testTable), each = nrow(testTable))
pairwise.wilcox.test(
as.matrix(testTable),
groups,
p.adjust.method = "holm",
paired = TRUE
)
pairwise.wilcox.test(
as.matrix(testTable),
groups,
p.adjust.method = "holm",
paired = TRUE
)
groups = rep(1:ncol(testTable), each = nrow(testTable))
pairwise.wilcox.test(
as.matrix(testTable),
groups,
p.adjust.method = "holm",
paired = TRUE
)
groups = rep(1:ncol(Acc), each = nrow(Acc))
pairwise.wilcox.test(
Acc,
groups,
p.adjust.method = "holm",
paired = TRUE
)
myAcc = as.data.frame(cbind(Acc, k.fold = 1:11))[1:10,]
myData = melt.data.frame(
data = myAcc,
id.vars = c("k.fold"),
variable_name = "Method"
)
names(myData)[3] = "Acc"
ggplot(myData, aes(x = k.fold, y = Acc, fill = Method)) +
geom_col(position = "dodge")
myData = melt.data.frame(
data = as.data.frame(t(Acc[11,])),
variable_name = "Method"
)
names(myData)[2] = "Acc.mean"
ggplot(myData, aes(x = Method, y = Acc.mean, fill = Method)) +
geom_col(position = "dodge")
myData = melt.data.frame(
data = as.data.frame(t(Kappa[11,])),
variable_name = "Method"
)
names(myData)[2] = "Kappa.mean"
ggplot(myData, aes(x = Method, y = Kappa.mean, fill = Method)) +
geom_col(position = "dodge")
t(Acc[11,])
myData = rbind(Acc = t(Acc[11,]), Kappa = t(Kappa[11,]) )
myData
rowNames(myData) = c("Acc.mean", "Kappa.mean")
rownames(myData) = c("Acc.mean", "Kappa.mean")
myData = melt.data.frame(
data = as.data.frame(myData),
variable_name = "Method"
)
View(myData)
myData = rbind(c("Acc.mean", t(Acc[11,])), c("Kappa.mean", t(Kappa[11,])))
myData = melt.data.frame(
data = as.data.frame(myData),
variable_name = "Method"
)
myData = rbind(c("Acc.mean", t(Acc[11,])), c("Kappa.mean", t(Kappa[11,])))
myData = melt.data.frame(
data = as.data.frame(myData),
id.vars = ""
variable_name = "Method"
)
myData = rbind(c("Acc.mean", t(Acc[11,])), c("Kappa.mean", t(Kappa[11,])))
as.data.frame(myData)
myData = rbind(cbind("Acc.mean", t(Acc[11,])), cbind("Kappa.mean", t(Kappa[11,])))
as.data.frame(myData)
myData = rbind(cbind(Measure = "Acc.mean", t(Acc[11,])), cbind(Measure = "Kappa.mean", t(Kappa[11,])))
as.data.frame(myData)
myData = melt.data.frame(
data = as.data.frame(myData),
id.vars = "Measure"
variable_name = "Method"
)
myData = rbind(cbind(Measure = "Acc.mean", t(Acc[11,])), cbind(Measure = "Kappa.mean", t(Kappa[11,])))
myData = melt.data.frame(
data = as.data.frame(myData),
id.vars = "Measure",
variable_name = "Method"
)
myData
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge") +
facet_wrap(~Measure, nrow = 1)
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge") +
facet_wrap(~Measure, nrow = 1)
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge")
ggplot(myData, aes(x = Method, y = value, fill = Measure)) +
geom_col(position = "dodge")
ggplot(myData, aes(x = Method, y = value)) +
geom_col(position = "dodge")
ggplot(myData, aes(x = Method, y = value, fill = Measure))
ggplot(myData, aes(x = Method, y = value, fill = Measure)) +
geom_col()
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge") +
facet_wrap(~Measure, nrow = 1)
myData = melt.data.frame(
data = as.data.frame(t(Kappa[11,])),
variable_name = "Method"
)
names(myData)[2] = "Kappa.mean"
ggplot(myData, aes(x = Method, y = Kappa.mean, fill = Method)) +
geom_col(position = "dodge")
myData = rbind(cbind(Measure = "Acc.mean", t(Acc[11,])), cbind(Measure = "Kappa.mean", t(Kappa[11,])))
myData = melt.data.frame(
data = as.data.frame(myData),
id.vars = "Measure",
variable_name = "Method"
)
myData = rbind(cbind(Measure = "Acc.mean", t(Acc[11,])), cbind(Measure = "Kappa.mean", t(Kappa[11,])))
myData = melt.data.frame(
data = as.data.frame(myData),
id.vars = "Measure",
variable_name = "Method"
)
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge") +
facet_wrap(~Measure, nrow = 1)
str(myData)
myData$value = as.numeric(myData$value)
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge") +
facet_wrap(~Measure, nrow = 1)
myData = rbind(cbind(Measure = "Acc.mean", t(Acc[11,])), cbind(Measure = "Kappa.mean", t(Kappa[11,])))
str(myData)
myData = data.frame(Measure = c("Acc.mean", "Kappa.mean"))
myData = cbind(rbind(t(Acc[11,]), t(Kappa[11,])))
str(myData)
myData = data.frame(Measure = c("Acc.mean", "Kappa.mean"))
myData = cbind(myData, rbind(t(Acc[11,]), t(Kappa[11,])))
str(myData)
myData = melt.data.frame(
data = as.data.frame(myData),
id.vars = "Measure",
variable_name = "Method"
)
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge") +
facet_wrap(~Measure, nrow = 1)
ggplot(myData, aes(x = Method, y = value, fill = Method)) +
geom_col(position = "dodge") + ylab("") +
facet_wrap(~Measure, nrow = 1)
friedman.test(as.matrix(Acc))
groups = rep(1:ncol(Acc), each = nrow(Acc))
pairwise.wilcox.test(
Acc,
groups,
p.adjust.method = "holm",
paired = TRUE
)
# Build the workspace
source("classification/build-workspace.R")
# Some info about the classes
round(prop.table(table(tae$Class)) * 100, digits = 1)
# Normalize numeric data
tae$Size = normalize(tae$Size)
tae.tra.dt = lapply(tae.tra.dt, normalize.tae)
tae.tst.dt = lapply(tae.tst.dt, normalize.tae)
# Some plots
#plot(tae, col = tae$Class)
tae2 = tae
tae2$Instructor = as.integer(tae$Instructor)
tae2$Course = as.integer(tae$Course)
#ggpairs(tae2, aes(color = Class, alpha = 0.3))
################################
# k Nearest Neighbourgs (k-NN) #
################################
# Apply k-NN algorithm to the first set
tae_test_pred = knn(
train = tae.tra.dt[[1]], # Dataframe
test  = tae.tst.dt[[1]], # Dataframe
cl    = tae.tra.cl[[1]], # Vector (factor)
k     = 21
)
# See the results on a contingency table (confusion matrix)
table(tae_test_pred, tae.tst.cl[[1]])
# Apply k-NN algorithm to every dataset and check the
# overall accuracy for several values of k. Repeat this process
# m times, to get the random part working.
k.max = 35
Acc = data.frame(k = 1:k.max)
for (m in 1:9) {
for (k in 1:k.max) {
acc = rep(0, 10)
for (i in 1:10) {
tae_test_pred = knn(
train = tae.tra.dt[[i]], # Dataframe
test  = tae.tst.dt[[i]], # Dataframe
cl    = tae.tra.cl[[i]], # Vector (factor)
k     = k
)
acc[i] = accuracy(
table(tae_test_pred, tae.tst.cl[[i]])
)
}
Acc[k, paste("Acc", m, sep = "")] = mean(acc)
}
}
Acc$Acc_mean = rowMeans(Acc[,-1])
myData = melt.data.frame(
data = Acc,
id.vars = "k"
)
myData$lineSize = 1
myData[myData$variable=="Acc_mean",]$lineSize = 2
max(Acc$Acc_mean)
which.max(Acc$Acc_mean)
ggplot(myData, aes(x = k, y = value, color = variable, size = lineSize)) +
geom_line() + scale_size(range = c(0.5, 2), guide="none") + ylab("Accuracy")
## It seems that k=1 performs the best, with Acc = 0.61
# This plot could also be done with training data, to test for overfitting
# Fill in the table in the document
Acc.knn = matrix(ncol = 10, nrow = 10)
rownames(Acc.knn) = paste("K", 1:10, sep = "")
colnames(Acc.knn) = c(paste("Acc", 1:9, sep = ""), "Acc_mean")
Kappa.knn = matrix(ncol = 10, nrow = 10)
rownames(Kappa.knn) = paste("K", 1:10, sep = "")
colnames(Kappa.knn) = c(paste("Kappa", 1:9, sep = ""), "Kappa_mean")
for (m in 1:9) {
myAcc   = rep(0, 10)
myKappa = rep(0, 10)
for (i in 1:10) {
tae_test_pred = knn(
train = tae.tra.dt[[i]], # Dataframe
test  = tae.tst.dt[[i]], # Dataframe
cl    = tae.tra.cl[[i]], # Vector (factor)
k     = 1
)
cm = confusionMatrix(
table(tae_test_pred, tae.tst.cl[[i]])
)
myAcc[i]   = cm$overall[1]
myKappa[i] = cm$overall[2]
}
Acc.knn[,m]   = myAcc
Kappa.knn[,m] = myKappa
}
Acc.knn[,10]   = rowMeans(Acc.knn[,1:9])
Kappa.knn[,10] = rowMeans(Kappa.knn[,1:9])
View
View(Acc)
sd
sd(Acc[1,2:10])
source('/home/cristian10/workspace/master/icd/final/src/classification/classification.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/analysis/abalone.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/analysis/abalone.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/analysis/tae.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/regression/linear-regression.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/regression/linear-regression.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/regression/knn-regression.R', echo=TRUE)
# Build the workspace
source("regression/build-workspace.R")
abalone = abalone[abalone$Height<0.3,]
# Get simple knn models
simple.knn.fit = list()
for (i in 1:(length(abalone)-1)) {
simple.knn.fit[[i]] =
kknn(abalone$Rings~abalone[,i], abalone, abalone)
names(simple.knn.fit)[i] = names(abalone)[i]
}
## Scatterplots
myData1 = melt.data.frame(
abalone,
id.vars=c("Sex", "Rings")
)
myData2 = data.frame()
for (variable in names(simple.knn.fit)[2:8]) {
Prediction = simple.knn.fit[[variable]]$fitted.values
myData2 = rbind(myData2, data.frame(Prediction))
}
myData = cbind(myData1, myData2)
Data = "Original data"
b = "Prediction"
colorPalette <- c("#000000", "#56B4E9")
ggplot(myData) +
geom_point(
aes(x = value, y = Rings, color = Data),
alpha = 0.03
) +
geom_point(
aes(x = value, y = Prediction, color = b),
alpha = 0.03
) +
facet_wrap( ~ variable, ncol = 2, scales = "free") +
xlab("") +
scale_colour_manual(values=colorPalette) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
## MSE
MSE = matrix(nrow = 8, ncol = 2)
colnames(MSE) = c("train", "test")
rownames(MSE) = names(abalone)[1:8]
for (tt in colnames(MSE)) {
for (i in rownames(MSE)) {
MSE[i, tt] = mean(sapply(
1:5,
run_knn_fold,
model = Rings~eval(parse(text = i)),
tt = tt,
k = 7   # Modify k
))
}
}
## Comparative k
k = 1:20
MSE.Shell_weight = data.frame(k)
for (tt in c("train", "test")) {
for (i in k) {
MSE.Shell_weight[i,tt] = mean(sapply(
1:5,
run_knn_fold,
model = Rings~Shell_weight,
tt = tt,
k = i
))
}
}
Data = "test"
b = "train"
ggplot(MSE.Shell_weight) +
geom_point(aes(x = k, y = test,  color = Data)) +
geom_line (aes(x = k, y = test,  color = Data)) +
geom_point(aes(x = k, y = train, color = b)) +
geom_line (aes(x = k, y = train, color = b)) +
ylab("MSE") +
scale_colour_manual(values=colorPalette)
# Non-linearities
abalone = add.non.linearities(abalone)
abalone.tra = lapply(abalone.tra, add.non.linearities)
abalone.tst = lapply(abalone.tst, add.non.linearities)
MSE = matrix(nrow = ncol(abalone), ncol = 2)
colnames(MSE) = c("train", "test")
rownames(MSE) = names(abalone)
for (tt in colnames(MSE)) {
for (i in rownames(MSE)) {
MSE[i, tt] = mean(sapply(
1:5,
run_knn_fold,
model = Rings~eval(parse(text = i)),
tt = tt,
k = 7   # Modify k
))
}
}
# Multiple variables
abalone = abalone[,1:9]
abalone.tra = lapply(abalone.tra, function(df){return(df[,1:9])})
abalone.tst = lapply(abalone.tst, function(df){return(df[,1:9])})
MSE.record = data.frame()
knn.MSE.data.frame = function(
model = Rigns~.,
k = 1:20, i = 1:5,
tt = c("train", "test")
) {
MSE = data.frame(k)
tt_ = tt
i_  = i
for (tt in tt_) {
for (i in k) {
MSE[i, tt] = mean(sapply(
i_,
run_knn_fold,
model = model,
tt = tt,
k = i   # Modify k
))
}
}
MSE$model = as.character(myModel)[3]
return(MSE)
}
plot.MSE.data.frame = function(MSE) {
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE")
}
myModel = Rings~.
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE)
plot.MSE.data.frame = function(MSE, model = "") {
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") +
ggtitle(as.character(model))
}
myModel = Rings~.
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE)
plot.MSE.data.frame(MSE, myModel)
as.character(myModel)
as.character.default()
as.character.default(myModel)
as.character.default(lol~adsf+f3)
length(as.character.default(lol~adsf+f3))
plot.MSE.data.frame = function(MSE, model = "") {
model = as.character(myModel)
if(length(model) == 3) {
model = paste(model[2], model[1], model[3])
}
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") +
ggtitle(as.character(model))
}
plot.MSE.data.frame = function(MSE, model = "") {
model = as.character(myModel)
if(length(model) == 3) {
model = paste(model[2], model[1], model[3])
}
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") +
ggtitle(model)
}
plot.MSE.data.frame(MSE, myModel)
plot.MSE.data.frame = function(MSE, model = "") {
model = as.character(myModel)
if(length(model) == 3) {
model = paste(model[2], model[1], model[3])
}
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") +
ggtitle(model) +
theme(plot.title = element_text(lineheight=.8, face="bold"))
}
plot.MSE.data.frame(MSE, myModel)
# Simple regression
myModel = Rings~Shell_weight
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE, myModel)
plot.MSE.data.frame = function(MSE, model = "") {
model = as.character(myModel)
if(length(model) == 3) {
model = paste(model[2], model[1], model[3])
}
myData = melt.data.frame(
MSE,
id.vars = c("k", "model"),
variable_name = "Data"
)
ggplot(myData, aes(x = k, y = value, color = Data)) +
geom_point() + geom_line () + ylab("MSE") +
ggtitle(model)
}
plot.MSE.data.frame(MSE, myModel)
# Every variable
myModel = Rings~.
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE, myModel)
## Interactions
myModel = Rings ~
Length +
Height +
Whole_weight.log *
Shucked_weight.log *
Viscera_weight *
Shell_weight.3
MSE = knn.MSE.data.frame(myModel)
MSE.record = rbind(MSE.record, MSE)
plot.MSE.data.frame(MSE)
source('/home/cristian10/workspace/master/icd/final/src/regression/knn-regression.R', echo=TRUE)
source('/home/cristian10/workspace/master/icd/final/src/regression/comparison.R', echo=TRUE)
View(testResults)
myData = melt(testResults)
View(myData)
ggplot(myData, aes(x = variable)) +
geom_bar(stat = count)
myData = melt(colMeans(testResults))
View(testResults)
myData = melt(colMeans(testResults[2:4]))
View(myData)
colMeans(testResults[2:4])
colSums(testResults[2:4])
load("~/workspace/master/icd/final/.RData")
source("regression/build-workspace.R")
